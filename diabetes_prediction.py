# -*- coding: utf-8 -*-
"""Diabetes Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17d_GpX_Y6_p1_nacY2UPr1cCZc_0lOFD

Import dependencies
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis"""

#loading data set to pd.DF
diabetes_data = pd.read_csv('/content/diabetes.csv')

diabetes_data.head()

diabetes_data.shape

#statistical measures of the data
diabetes_data.describe()

diabetes_data['Outcome'].value_counts()

"""0 --> non_diabetic
1 --> diabetic
"""

diabetes_data.groupby('Outcome').mean()

# seperating the data and labels
X = diabetes_data.drop(columns = 'Outcome', axis = 1)
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)
# can use scaler.fittransform

print(standardized_data)

X = standardized_data
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Train, Test, Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel= 'linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Evaluate model"""

#finding the accuracy score
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#finding the accuracy score
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

input_data = (9,171,110,24,240,45.4,0.721,54)

# convert input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array for one instance

input_data_reshape = input_data_as_numpy_array.reshape(1, -1)

#standardize input data
std_data = scaler.transform(input_data_reshape)

print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

